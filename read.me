 C:\Project_IT/Scripts\poetry.exe
 python manage.py runserver


class RegisterSerializer(serializers.ModelSerializer):
    email = serializers.EmailField(
        required=True,
        validators=[UniqueValidator(queryset=User.objects.all())])

    password = serializers.CharField(write_only=True, required=True, validators=[validate_password])
    password2 = serializers.CharField(write_only=True, required=True)

    class Meta:
        model = Teacher
        fields = ('surname', 'name', 'password', 'password2', 'email')
        extra_kwargs = {
            'email': {'required': True},
            'last_name': {'required': True},
            'password2': {'write_only': True},
            'email': {'required': True},

        }

    def validate(self, attrs):
        if attrs['password'] != attrs['password2']:
            raise serializers.ValidationError({"password": "Password fields didn't match."})

        return attrs

    def create(self, validated_data):
        user = Teacher.objects.create(
            surname=validated_data['surname'],
            name=validated_data['name'],
            email=validated_data['email'],
        )

        user.set_password(validated_data['password'])
        user.save()

        return user


class RegisterSerializer(serializers.ModelSerializer):
    email = serializers.EmailField(
        required=True,
        validators=[UniqueValidator(queryset=User.objects.all())])

    password = serializers.CharField(write_only=True, required=True, validators=[validate_password])
    password2 = serializers.CharField(write_only=True, required=True)

    class Meta:
        model = Teacher
        fields = ('surname', 'name', 'password', 'password2', 'email')
        extra_kwargs = {
            'email': {'required': True},
            'last_name': {'required': True},
            'password2': {'write_only': True},
            'email': {'required': True},

        }

    def validate(self, attrs):
        if attrs['password'] != attrs['password2']:
            raise serializers.ValidationError({"password": "Password fields didn't match."})

        return attrs

    def create(self, validated_data):
        user = Teacher.objects.create(
            surname=validated_data['surname'],
            name=validated_data['name'],
            email=validated_data['email'],
        )

        user.set_password(validated_data['password'])
        user.save()

        return user


class Student(models.Model):
    first_name = models.CharField("first name", max_length=150, blank=True)
    last_name = models.CharField("last name", max_length=150, blank=True)
    email = models.EmailField("email address", blank=True)
    password = models.CharField("password", max_length=128)
    group = models.ForeignKey(
        'Group',
        on_delete=models.CASCADE,
        related_name='students',
    )  # группа в которой учится студент


import datetime
from datetime import date


def calc_discount(self, discount: float = 0.12) -> str:
    birth_date = datetime(2023, 11, 31)
    if birth_date == date.today():
        return str(float(self.price) / discount)
    elif date.today() > birth_date:
        birth_date = datetime(2024, 11, 31)
